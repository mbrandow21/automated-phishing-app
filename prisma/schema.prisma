// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

model Company {
  id                String        @id @default(cuid())
  companyName       String
  adminInviteToken  String        @unique
  userInviteToken   String        @unique
  companyOwnerId    String
  owner             User          @relation(name: "CompanyOwner", fields: [companyOwnerId], references: [id])
  companyUsers      CompanyUser[]
  companyContacts   Contact[]
  AuditSchedules    AuditSchedule[]

  @@unique([companyName, companyOwnerId])
}

model CompanyUser {
  id              String   @id @default(cuid())
  userId          String
  companyId       String
  user            User     @relation(fields: [userId], references: [id])
  company         Company  @relation(fields: [companyId], references: [id])
  userCompanyRole UserRole @default(USER)

  @@unique([userId, companyId])
}

model User {
  id                   String                  @id @default(cuid())
  name                 String?
  email                String?                 @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  accounts             Account[]
  isTwoFactorEnabled   Boolean                 @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  companies            CompanyUser[]
  ownedCompanies       Company[]               @relation(name: "CompanyOwner")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Contact {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  firstName   String?
  lastName    String?
  email       String   @unique
  position    String?
  lastAuditDate DateTime?
  auditScore  Float?

  @@index([companyId])
  EmailDetails EmailDetail[]
}

model AuditSchedule {
  id          String   @id @default(cuid())
  companyId   String
  subject     String
  body        String
  sendDate    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id])
  emailDetails EmailDetail[]

  @@index([companyId])
}

model EmailDetail {
  id             String   @id @default(cuid())
  auditScheduleId String
  contactId      String
  email          String
  sent           Boolean  @default(false)
  sentAt         DateTime?

  auditSchedule  AuditSchedule @relation(fields: [auditScheduleId], references: [id])
  contact        Contact       @relation(fields: [contactId], references: [id])
  
  @@index([auditScheduleId])
  @@index([contactId])
}



model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
